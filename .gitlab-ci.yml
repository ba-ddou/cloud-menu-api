# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - touch .env
    - echo ATLAS_DB=${ATLAS_DB} >  .env

    - apt-get install python3.6
    - mkdir gcloud-build && cd gcloud-build
    - wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-189.0.0-linux-x86_64.tar.gz;
    - tar -xzf google-cloud-sdk-189.0.0-linux-x86_64.tar.gz
    - ./google-cloud-sdk/install.sh
    - source google-cloud-sdk/path.bash.inc && echo "source google-cloud-sdk/path.bash.inc" >> $HOME/.profile
    - ./google-cloud-sdk/bin/gcloud init
    - echo $GCP_SERVICE_KEY > gcloud-service-key.json
    - gcloud auth activate-service-account --key-file gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud auth configure-docker
    # - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    # - |
    #   if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
    #     tag=""
    #     echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    #   else
    #     tag=":$CI_COMMIT_REF_SLUG"
    #     echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    #   fi
    
    - tag="gcr.io/${GCP_PROJECT_ID}/cloud-menu-api"
    - docker build --pull -t "${tag}" .
    - docker push "${tag}"


    # - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    # - docker push "$CI_REGISTRY_IMAGE${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: '$CI_COMMIT_REF_NAME == "deployBeta"'
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile


# GCP-registery-deploy:
#   image: google/cloud-sdk
#   stage: deploy
#   script:
#     - echo $GCP_SERVICE_KEY > gcloud-service-key.json
#     - gcloud auth activate-service-account --key-file gcloud-service-key.json
#     - gcloud config set project $GCP_PROJECT_ID
#     - docker push gcr.io/${GCP_PROJECT_ID}/cloud-menu-api